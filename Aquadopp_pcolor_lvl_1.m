function fighandle = Aquadopp_pcolor_lvl_1(aquadoppL1, strplt)
%% fighandle = AQUADOPP_PCOLOR_LVL_1(aquadoppL1, strplt)
%
%   inputs
%       - aquadoppL1: Aquadopp level 1 ROXSI data structure.
%       - strplt (optional): string to indicate whether averaged
%                            or full velocity data is plotted
%                            (default is averaged fields).
%
%   outputs
%       - fighandle: figure handle.
%
%
% AQUADOPP_PCOLOR_LVL_1.m does some basic pcolor plots of the
% level 1 Aquadopp data.
%
%
% Olavo Badaro Marques, 16/Aug/2022.


%% Add cmocean in the Matlab path to use red-blue colormap

%
addpath(genpath(fullfile(repo_dirpath(), 'cmocean')))


%% If second input not given, set default to plot averaged quantities

if ~exist('strplt', 'var')
    %
    strplt = 'averaged';
end


%% Define a list of possible triplets (i.e. each row)
% of velocity coordinate names (Then look for these
% triplets and the first one that is found
% in the data will be plotted)

%
uvw_names = ["u", "v", "w"; ...
             "Ue", "Vn", "Wup"];

%
llook_coord = true;
indrow_aux = 0;
%
while llook_coord && (indrow_aux < size(uvw_names, 1))
    %
    indrow_aux = indrow_aux + 1;
    %
    if isfield(aquadoppL1, uvw_names(indrow_aux, 1)) && ...
       isfield(aquadoppL1, uvw_names(indrow_aux, 2)) && ...
       isfield(aquadoppL1, uvw_names(indrow_aux, 3))
        %
        llook_coord = false;
    end
end

%
if llook_coord
    error('Expected velocity coordinates for plotting were not found in the data structure')
end


%% Define dynamic fields that allow for structures within structures

%
if strcmp(strplt, 'averaged')

    %
    time_dynfld = {'averaged', 'dtime'};
    %
    v1_dynfld = {'averaged', char(uvw_names(indrow_aux, 1))};
    v2_dynfld = {'averaged', char(uvw_names(indrow_aux, 2))};
    v3_dynfld = {'averaged', char(uvw_names(indrow_aux, 3))};
    %
    a1_dynfld = {'averaged', 'a1'};
    a2_dynfld = {'averaged', 'a2'};
    a3_dynfld = {'averaged', 'a3'};

%
elseif strcmp(strplt, 'full')

    %
    time_dynfld = {'dtime'};
    %
    v1_dynfld = {char(uvw_names(indrow_aux, 1))};
    v2_dynfld = {char(uvw_names(indrow_aux, 2))};
    v3_dynfld = {char(uvw_names(indrow_aux, 3))};
    %
    a1_dynfld = {'a1'};
    a2_dynfld = {'a2'};
    a3_dynfld = {'a3'};

%
else
    %
    error('Invalid input strplt.')
end


% % % These dynamic fields (though not recommended
% % % by Mathworks), allow for
% % 
% % figure,
% %     pcolor(getfield(aquadopplvl1, v1_dynfld{:}))


%% Get time in separate variable for convenience

dtime = getfield(aquadoppL1, time_dynfld{:});


%% Define the red-blue colormap (the output of cmocean('balance')),
% just so the function cmocean doesn't need to be called.

redbluecmap = [0.0932    0.1112    0.2615; ...
               0.0970    0.1169    0.2731; ...
               0.1010    0.1224    0.2849; ...
               0.1050    0.1278    0.2969; ...
               0.1090    0.1332    0.3090; ...
               0.1129    0.1385    0.3212; ...
               0.1168    0.1438    0.3335; ...
               0.1205    0.1490    0.3459; ...
               0.1242    0.1542    0.3585; ...
               0.1278    0.1594    0.3712; ...
               0.1312    0.1646    0.3840; ...
               0.1345    0.1697    0.3969; ...
               0.1377    0.1749    0.4100; ...
               0.1408    0.1800    0.4232; ...
               0.1437    0.1851    0.4366; ...
               0.1465    0.1902    0.4500; ...
               0.1490    0.1953    0.4636; ...
               0.1514    0.2003    0.4773; ...
               0.1536    0.2055    0.4912; ...
               0.1556    0.2106    0.5051; ...
               0.1574    0.2157    0.5192; ...
               0.1588    0.2209    0.5334; ...
               0.1600    0.2260    0.5477; ...
               0.1609    0.2313    0.5620; ...
               0.1614    0.2366    0.5765; ...
               0.1616    0.2419    0.5909; ...
               0.1612    0.2474    0.6054; ...
               0.1604    0.2529    0.6199; ...
               0.1589    0.2586    0.6343; ...
               0.1567    0.2644    0.6486; ...
            0.1537    0.2705    0.6626; ...
            0.1498    0.2768    0.6762; ...
            0.1446    0.2834    0.6893; ...
            0.1382    0.2903    0.7016; ...
            0.1302    0.2977    0.7128; ...
            0.1207    0.3056    0.7225; ...
            0.1098    0.3139    0.7305; ...
            0.0980    0.3225    0.7365; ...
            0.0857    0.3315    0.7408; ...
            0.0737    0.3405    0.7435; ...
            0.0625    0.3495    0.7450; ...
            0.0528    0.3585    0.7455; ...
            0.0452    0.3673    0.7455; ...
            0.0402    0.3759    0.7450; ...
            0.0383    0.3845    0.7442; ...
            0.0395    0.3928    0.7432; ...
            0.0435    0.4010    0.7420; ...
            0.0496    0.4091    0.7408; ...
            0.0574    0.4170    0.7396; ...
            0.0663    0.4249    0.7384; ...
            0.0758    0.4326    0.7372; ...
            0.0858    0.4402    0.7360; ...
            0.0961    0.4477    0.7349; ...
            0.1065    0.4551    0.7339; ...
            0.1170    0.4624    0.7330; ...
            0.1275    0.4697    0.7321; ...
            0.1380    0.4769    0.7313; ...
            0.1485    0.4840    0.7306; ...
            0.1590    0.4911    0.7300; ...
            0.1694    0.4981    0.7295; ...
            0.1798    0.5050    0.7291; ...
            0.1901    0.5120    0.7287; ...
            0.2005    0.5188    0.7285; ...
            0.2108    0.5257    0.7283; ...
            0.2211    0.5325    0.7282; ...
            0.2314    0.5392    0.7282; ...
            0.2417    0.5459    0.7282; ...
            0.2521    0.5526    0.7283; ...
            0.2625    0.5592    0.7285; ...
            0.2730    0.5658    0.7288; ...
            0.2835    0.5724    0.7291; ...
            0.2941    0.5789    0.7295; ...
            0.3049    0.5854    0.7300; ...
            0.3157    0.5918    0.7305; ...
            0.3267    0.5982    0.7311; ...
            0.3378    0.6045    0.7318; ...
            0.3491    0.6108    0.7325; ...
            0.3605    0.6171    0.7333; ...
            0.3721    0.6232    0.7342; ...
            0.3839    0.6294    0.7351; ...
            0.3958    0.6354    0.7362; ...
            0.4079    0.6414    0.7374; ...
            0.4201    0.6474    0.7387; ...
            0.4324    0.6533    0.7401; ...
            0.4448    0.6591    0.7417; ...
            0.4573    0.6649    0.7434; ...
            0.4699    0.6707    0.7453; ...
            0.4824    0.6764    0.7474; ...
            0.4950    0.6821    0.7496; ...
            0.5076    0.6878    0.7519; ...
            0.5201    0.6934    0.7544; ...
            0.5327    0.6991    0.7571; ...
            0.5451    0.7048    0.7599; ...
            0.5575    0.7105    0.7629; ...
            0.5699    0.7161    0.7660; ...
            0.5821    0.7218    0.7693; ...
            0.5944    0.7275    0.7727; ...
            0.6065    0.7333    0.7762; ...
            0.6186    0.7390    0.7798; ...
            0.6306    0.7448    0.7836; ...
            0.6425    0.7507    0.7875; ...
            0.6544    0.7565    0.7914; ...
            0.6662    0.7624    0.7955; ...
            0.6780    0.7683    0.7997; ...
            0.6897    0.7743    0.8039; ...
            0.7013    0.7803    0.8083; ...
            0.7129    0.7864    0.8128; ...
            0.7244    0.7925    0.8173; ...
            0.7359    0.7986    0.8219; ...
            0.7473    0.8048    0.8266; ...
            0.7587    0.8111    0.8314; ...
            0.7700    0.8174    0.8363; ...
            0.7813    0.8237    0.8412; ...
            0.7925    0.8301    0.8462; ...
            0.8037    0.8366    0.8513; ...
            0.8148    0.8431    0.8565; ...
            0.8259    0.8497    0.8617; ...
            0.8370    0.8563    0.8671; ...
            0.8480    0.8630    0.8724; ...
            0.8590    0.8698    0.8779; ...
            0.8699    0.8767    0.8834; ...
            0.8807    0.8836    0.8890; ...
            0.8915    0.8906    0.8946; ...
            0.9022    0.8977    0.9003; ...
            0.9129    0.9049    0.9061; ...
            0.9234    0.9121    0.9120; ...
            0.9338    0.9195    0.9180; ...
            0.9439    0.9271    0.9241; ...
            0.9450    0.9267    0.9232; ...
            0.9402    0.9175    0.9127; ...
            0.9358    0.9082    0.9020; ...
            0.9316    0.8988    0.8911; ...
            0.9276    0.8895    0.8802; ...
            0.9238    0.8802    0.8691; ...
            0.9201    0.8708    0.8580; ...
            0.9165    0.8615    0.8469; ...
            0.9129    0.8522    0.8357; ...
            0.9095    0.8429    0.8245; ...
            0.9061    0.8337    0.8133; ...
            0.9028    0.8244    0.8020; ...
            0.8996    0.8152    0.7907; ...
            0.8964    0.8060    0.7794; ...
            0.8933    0.7968    0.7681; ...
            0.8903    0.7876    0.7568; ...
            0.8872    0.7785    0.7454; ...
            0.8843    0.7693    0.7341; ...
            0.8813    0.7602    0.7227; ...
            0.8784    0.7511    0.7113; ...
            0.8755    0.7420    0.7000; ...
            0.8727    0.7329    0.6886; ...
            0.8699    0.7239    0.6772; ...
            0.8671    0.7148    0.6658; ...
            0.8643    0.7058    0.6544; ...
            0.8615    0.6968    0.6431; ...
            0.8588    0.6878    0.6317; ...
            0.8561    0.6788    0.6203; ...
            0.8534    0.6698    0.6090; ...
            0.8507    0.6609    0.5976; ...
            0.8480    0.6519    0.5863; ...
            0.8453    0.6430    0.5750; ...
            0.8426    0.6340    0.5637; ...
            0.8400    0.6251    0.5524; ...
            0.8373    0.6161    0.5412; ...
            0.8346    0.6072    0.5299; ...
            0.8319    0.5983    0.5187; ...
            0.8293    0.5893    0.5075; ...
            0.8266    0.5804    0.4964; ...
            0.8239    0.5715    0.4852; ...
            0.8212    0.5625    0.4741; ...
            0.8185    0.5536    0.4631; ...
            0.8158    0.5446    0.4520; ...
            0.8131    0.5357    0.4411; ...
            0.8103    0.5267    0.4301; ...
            0.8076    0.5177    0.4192; ...
            0.8048    0.5088    0.4084; ...
            0.8020    0.4998    0.3976; ...
            0.7992    0.4907    0.3868; ...
            0.7963    0.4817    0.3761; ...
            0.7935    0.4727    0.3655; ...
            0.7906    0.4636    0.3550; ...
            0.7877    0.4545    0.3445; ...
            0.7848    0.4453    0.3341; ...
            0.7818    0.4362    0.3238; ...
            0.7788    0.4270    0.3136; ...
            0.7758    0.4177    0.3035; ...
            0.7727    0.4084    0.2935; ...
            0.7696    0.3991    0.2836; ...
            0.7665    0.3898    0.2738; ...
            0.7633    0.3803    0.2642; ...
            0.7601    0.3709    0.2548; ...
            0.7568    0.3613    0.2455; ...
            0.7535    0.3517    0.2364; ...
            0.7501    0.3420    0.2275; ...
            0.7467    0.3323    0.2189; ...
            0.7432    0.3225    0.2105; ...
            0.7397    0.3126    0.2024; ...
            0.7360    0.3026    0.1947; ...
            0.7323    0.2925    0.1873; ...
            0.7285    0.2824    0.1803; ...
            0.7246    0.2721    0.1738; ...
            0.7205    0.2618    0.1678; ...
            0.7163    0.2515    0.1623; ...
            0.7119    0.2410    0.1574; ...
            0.7074    0.2306    0.1532; ...
            0.7027    0.2202    0.1496; ...
            0.6977    0.2097    0.1467; ...
            0.6925    0.1994    0.1445; ...
            0.6870    0.1891    0.1429; ...
            0.6813    0.1790    0.1419; ...
            0.6752    0.1690    0.1414; ...
            0.6689    0.1592    0.1414; ...
            0.6623    0.1497    0.1419; ...
            0.6555    0.1404    0.1427; ...
            0.6484    0.1313    0.1438; ...
            0.6410    0.1226    0.1451; ...
            0.6333    0.1142    0.1467; ...
            0.6254    0.1061    0.1483; ...
            0.6173    0.0985    0.1500; ...
            0.6089    0.0914    0.1518; ...
            0.6002    0.0847    0.1535; ...
            0.5914    0.0787    0.1552; ...
            0.5823    0.0733    0.1569; ...
            0.5730    0.0686    0.1583; ...
            0.5634    0.0647    0.1596; ...
            0.5537    0.0614    0.1607; ...
            0.5438    0.0589    0.1615; ...
            0.5338    0.0571    0.1620; ...
            0.5236    0.0559    0.1622; ...
            0.5133    0.0552    0.1621; ...
            0.5029    0.0549    0.1617; ...
            0.4925    0.0549    0.1609; ...
            0.4820    0.0551    0.1597; ...
            0.4715    0.0554    0.1583; ...
            0.4609    0.0558    0.1565; ...
            0.4504    0.0562    0.1545; ...
            0.4399    0.0565    0.1521; ...
            0.4293    0.0568    0.1495; ...
            0.4188    0.0570    0.1467; ...
            0.4084    0.0570    0.1437; ...
            0.3980    0.0569    0.1404; ...
            0.3876    0.0566    0.1370; ...
            0.3772    0.0562    0.1333; ...
            0.3669    0.0557    0.1295; ...
            0.3566    0.0550    0.1256; ...
            0.3464    0.0542    0.1215; ...
            0.3362    0.0532    0.1173; ...
            0.3260    0.0520    0.1130; ...
            0.3159    0.0507    0.1085; ...
            0.3058    0.0493    0.1040; ...
            0.2958    0.0477    0.0993; ...
            0.2858    0.0460    0.0945; ...
            0.2758    0.0441    0.0897; ...
            0.2658    0.0421    0.0847; ...
            0.2559    0.0399    0.0797; ...
            0.2460    0.0376    0.0746; ...
            0.2361    0.0353    0.0694];

%% Make the figure

%
v1plt_var = getfield(aquadoppL1, v1_dynfld{:});
v2plt_var = getfield(aquadoppL1, v2_dynfld{:});
v3plt_var = getfield(aquadoppL1, v3_dynfld{:});

%
fighandle = figure;

    %
    haxs_v1 = axes('Position', [0.1, 0.65, 0.35, 0.25]);
    haxs_v2 = axes('Position', [0.1, 0.375, 0.35, 0.25]);
    haxs_v3 = axes('Position', [0.1, 0.1, 0.35, 0.25]);
    %
    haxs_a1 = axes('Position', [0.55, 0.65, 0.35, 0.25]);
    haxs_a2 = axes('Position', [0.55, 0.375, 0.35, 0.25]);
    haxs_a3 = axes('Position', [0.55, 0.1, 0.35, 0.25]);
    %
    haxs_all = [haxs_v1, haxs_a1, haxs_v2, haxs_a2, haxs_v3, haxs_a3];

    %
    hold(haxs_all, 'on')


        % ----------------------------------------------------
        %
        pcolor(haxs_v1, dtime, aquadoppL1.zhab, v1plt_var)
        pcolor(haxs_v2, dtime, aquadoppL1.zhab, v2plt_var)
        pcolor(haxs_v3, dtime, aquadoppL1.zhab, v3plt_var)
        %
        pcolor(haxs_a1, dtime, aquadoppL1.zhab, getfield(aquadoppL1, a1_dynfld{:}))
        pcolor(haxs_a2, dtime, aquadoppL1.zhab, getfield(aquadoppL1, a2_dynfld{:}))
        pcolor(haxs_a3, dtime, aquadoppL1.zhab, getfield(aquadoppL1, a3_dynfld{:}))


    %
    for i2 = 1:length(haxs_all)
        shading(haxs_all(i2), 'flat')
    end

    % Plot pressure (~depth)
    for i = 1:length(haxs_all)

% % %         % Where the surface is
% % %         plot(haxs_all(i), aquadoppL1.dtime, aquadoppL1.pressure, '-k', 'LineWidth', 2)
% % % 
% % %         % Where I should trim the data to remove sidelobe contamination
% % %         plot(haxs_all(i), aquadoppL1.dtime, aquadoppL1.pressure - (2*aquadoppL1.binsize), '--k', 'LineWidth', 1)

        %
        plot(haxs_all(i), aquadoppL1.dtime, aquadoppL1.bottomdepthfrompres, '-k', 'LineWidth', 1)

    end


    % ----------------------------------------------------
    %
    % Colorbars
    for i2 = 1:length(haxs_all)
        hcb_aux(i2) = colorbar(haxs_all(i2));
        hcb_aux(i2).Position(3) = 0.02;
    end
    %
    for i2 = 1:2:length(haxs_all)
        hcb_aux(i2).Position(1) = 0.46;
    end
    for i2 = 2:2:length(haxs_all)
        hcb_aux(i2).Position(1) = 0.91;
    end

    %
    set(haxs_all, 'FontSize', 16, 'Box', 'on', ...
                  'XGrid', 'on', 'YGrid', 'on', ...
                  'YLim', [0, ceil(aquadoppL1.zhab(end))], ...
                  'Color', 0.7.*[1, 1, 1])
    set(haxs_all, 'XLim', dtime([1, end]))

    % Simple fixed color limits
% %     set([haxs_v1, haxs_v2], 'CLim', 0.2.*[-1, 1])
    % Something that might look better
    lbelowmeanp = aquadoppL1.zhab < mean(aquadoppL1.pressure, 'omitnan');
    %
    U_ref_Clim = max([mean(std(v1plt_var(lbelowmeanp, :), 0, 2, 'omitnan'), 'omitnan'), ...
                      mean(std(v2plt_var(lbelowmeanp, :), 0, 2, 'omitnan'), 'omitnan')]);
    set([haxs_v1, haxs_v2], 'CLim', 1.25*U_ref_Clim .*[-1, 1])

    %
    set(haxs_v3, 'CLim', 0.05.*[-1, 1])
    

    %
    set([haxs_a1, haxs_a2, haxs_a3], 'CLim', [aquadoppL1.backscatterTH, 200])

    %
    set(gcf, 'Units', 'normalized', 'Position', [0.3, 0.3, 0.4, 0.35]);
    %
    set(haxs_all(1:(end-2)), 'XTickLabel', [])
   
    %
    ylabel(haxs_all(3), 'Height above the bottom [m]', 'Interpreter', 'Latex', 'FontSize', 16)
    %
    title(haxs_all(1), ['Aquadopp ' char(aquadoppL1.mooringID) ' - SN ' char(aquadoppL1.SN) ': Ue, Vn, and Wup (' strplt ' fields)'], 'Interpreter', 'Latex', 'FontSize', 14)
    title(haxs_all(2), ['Aquadopp ' char(aquadoppL1.mooringID) ' - SN ' char(aquadoppL1.SN) ': a1, a2, and a3'], 'Interpreter', 'Latex', 'FontSize', 14)

    %
    set(haxs_all(1:2:end), 'Colormap', redbluecmap)
    
    % ******* Requires cmocean toolbox *******
% %     set(haxs_all(1:2:end), 'Colormap', cmocean('balance'))

% %     set(haxs_all(2:2:end), 'Colormap', cmocean('amp'))    % actually,
% I've changed my mind that this is a good colormap for backscatter,
% because a good colormap here would be one that highlights where the low
% values happen. The colormap could be flipped, but that would be weird too
% because the low values would have the brightest colors.

